package com.megaeyes.persistence.ibatis.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AcRDoorCardExample {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table HBDW1.AC_R_DOOR_CARD
     *
     * @abatorgenerated Wed May 16 09:36:07 GMT 2012
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table HBDW1.AC_R_DOOR_CARD
     *
     * @abatorgenerated Wed May 16 09:36:07 GMT 2012
     */
    protected List oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table HBDW1.AC_R_DOOR_CARD
     *
     * @abatorgenerated Wed May 16 09:36:07 GMT 2012
     */
    public AcRDoorCardExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table HBDW1.AC_R_DOOR_CARD
     *
     * @abatorgenerated Wed May 16 09:36:07 GMT 2012
     */
    protected AcRDoorCardExample(AcRDoorCardExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table HBDW1.AC_R_DOOR_CARD
     *
     * @abatorgenerated Wed May 16 09:36:07 GMT 2012
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table HBDW1.AC_R_DOOR_CARD
     *
     * @abatorgenerated Wed May 16 09:36:07 GMT 2012
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table HBDW1.AC_R_DOOR_CARD
     *
     * @abatorgenerated Wed May 16 09:36:07 GMT 2012
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table HBDW1.AC_R_DOOR_CARD
     *
     * @abatorgenerated Wed May 16 09:36:07 GMT 2012
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table HBDW1.AC_R_DOOR_CARD
     *
     * @abatorgenerated Wed May 16 09:36:07 GMT 2012
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table HBDW1.AC_R_DOOR_CARD
     *
     * @abatorgenerated Wed May 16 09:36:07 GMT 2012
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table HBDW1.AC_R_DOOR_CARD
     *
     * @abatorgenerated Wed May 16 09:36:07 GMT 2012
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table HBDW1.AC_R_DOOR_CARD
     *
     * @abatorgenerated Wed May 16 09:36:07 GMT 2012
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return this;
        }

        public Criteria andIdEqualTo(String value) {
            addCriterion("ID =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(String value) {
            addCriterion("ID <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(String value) {
            addCriterion("ID >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(String value) {
            addCriterion("ID >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(String value) {
            addCriterion("ID <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(String value) {
            addCriterion("ID <=", value, "id");
            return this;
        }

        public Criteria andIdLike(String value) {
            addCriterion("ID like", value, "id");
            return this;
        }

        public Criteria andIdNotLike(String value) {
            addCriterion("ID not like", value, "id");
            return this;
        }

        public Criteria andIdIn(List values) {
            addCriterion("ID in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List values) {
            addCriterion("ID not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(String value1, String value2) {
            addCriterion("ID between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(String value1, String value2) {
            addCriterion("ID not between", value1, value2, "id");
            return this;
        }

        public Criteria andDoorIdIsNull() {
            addCriterion("DOOR_ID is null");
            return this;
        }

        public Criteria andDoorIdIsNotNull() {
            addCriterion("DOOR_ID is not null");
            return this;
        }

        public Criteria andDoorIdEqualTo(String value) {
            addCriterion("DOOR_ID =", value, "doorId");
            return this;
        }

        public Criteria andDoorIdNotEqualTo(String value) {
            addCriterion("DOOR_ID <>", value, "doorId");
            return this;
        }

        public Criteria andDoorIdGreaterThan(String value) {
            addCriterion("DOOR_ID >", value, "doorId");
            return this;
        }

        public Criteria andDoorIdGreaterThanOrEqualTo(String value) {
            addCriterion("DOOR_ID >=", value, "doorId");
            return this;
        }

        public Criteria andDoorIdLessThan(String value) {
            addCriterion("DOOR_ID <", value, "doorId");
            return this;
        }

        public Criteria andDoorIdLessThanOrEqualTo(String value) {
            addCriterion("DOOR_ID <=", value, "doorId");
            return this;
        }

        public Criteria andDoorIdLike(String value) {
            addCriterion("DOOR_ID like", value, "doorId");
            return this;
        }

        public Criteria andDoorIdNotLike(String value) {
            addCriterion("DOOR_ID not like", value, "doorId");
            return this;
        }

        public Criteria andDoorIdIn(List values) {
            addCriterion("DOOR_ID in", values, "doorId");
            return this;
        }

        public Criteria andDoorIdNotIn(List values) {
            addCriterion("DOOR_ID not in", values, "doorId");
            return this;
        }

        public Criteria andDoorIdBetween(String value1, String value2) {
            addCriterion("DOOR_ID between", value1, value2, "doorId");
            return this;
        }

        public Criteria andDoorIdNotBetween(String value1, String value2) {
            addCriterion("DOOR_ID not between", value1, value2, "doorId");
            return this;
        }

        public Criteria andCardIdIsNull() {
            addCriterion("CARD_ID is null");
            return this;
        }

        public Criteria andCardIdIsNotNull() {
            addCriterion("CARD_ID is not null");
            return this;
        }

        public Criteria andCardIdEqualTo(String value) {
            addCriterion("CARD_ID =", value, "cardId");
            return this;
        }

        public Criteria andCardIdNotEqualTo(String value) {
            addCriterion("CARD_ID <>", value, "cardId");
            return this;
        }

        public Criteria andCardIdGreaterThan(String value) {
            addCriterion("CARD_ID >", value, "cardId");
            return this;
        }

        public Criteria andCardIdGreaterThanOrEqualTo(String value) {
            addCriterion("CARD_ID >=", value, "cardId");
            return this;
        }

        public Criteria andCardIdLessThan(String value) {
            addCriterion("CARD_ID <", value, "cardId");
            return this;
        }

        public Criteria andCardIdLessThanOrEqualTo(String value) {
            addCriterion("CARD_ID <=", value, "cardId");
            return this;
        }

        public Criteria andCardIdLike(String value) {
            addCriterion("CARD_ID like", value, "cardId");
            return this;
        }

        public Criteria andCardIdNotLike(String value) {
            addCriterion("CARD_ID not like", value, "cardId");
            return this;
        }

        public Criteria andCardIdIn(List values) {
            addCriterion("CARD_ID in", values, "cardId");
            return this;
        }

        public Criteria andCardIdNotIn(List values) {
            addCriterion("CARD_ID not in", values, "cardId");
            return this;
        }

        public Criteria andCardIdBetween(String value1, String value2) {
            addCriterion("CARD_ID between", value1, value2, "cardId");
            return this;
        }

        public Criteria andCardIdNotBetween(String value1, String value2) {
            addCriterion("CARD_ID not between", value1, value2, "cardId");
            return this;
        }

        public Criteria andAuthorizeTypeIsNull() {
            addCriterion("AUTHORIZE_TYPE is null");
            return this;
        }

        public Criteria andAuthorizeTypeIsNotNull() {
            addCriterion("AUTHORIZE_TYPE is not null");
            return this;
        }

        public Criteria andAuthorizeTypeEqualTo(BigDecimal value) {
            addCriterion("AUTHORIZE_TYPE =", value, "authorizeType");
            return this;
        }

        public Criteria andAuthorizeTypeNotEqualTo(BigDecimal value) {
            addCriterion("AUTHORIZE_TYPE <>", value, "authorizeType");
            return this;
        }

        public Criteria andAuthorizeTypeGreaterThan(BigDecimal value) {
            addCriterion("AUTHORIZE_TYPE >", value, "authorizeType");
            return this;
        }

        public Criteria andAuthorizeTypeGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("AUTHORIZE_TYPE >=", value, "authorizeType");
            return this;
        }

        public Criteria andAuthorizeTypeLessThan(BigDecimal value) {
            addCriterion("AUTHORIZE_TYPE <", value, "authorizeType");
            return this;
        }

        public Criteria andAuthorizeTypeLessThanOrEqualTo(BigDecimal value) {
            addCriterion("AUTHORIZE_TYPE <=", value, "authorizeType");
            return this;
        }

        public Criteria andAuthorizeTypeIn(List values) {
            addCriterion("AUTHORIZE_TYPE in", values, "authorizeType");
            return this;
        }

        public Criteria andAuthorizeTypeNotIn(List values) {
            addCriterion("AUTHORIZE_TYPE not in", values, "authorizeType");
            return this;
        }

        public Criteria andAuthorizeTypeBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("AUTHORIZE_TYPE between", value1, value2, "authorizeType");
            return this;
        }

        public Criteria andAuthorizeTypeNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("AUTHORIZE_TYPE not between", value1, value2, "authorizeType");
            return this;
        }

        public Criteria andAuthorizeTimeIsNull() {
            addCriterion("AUTHORIZE_TIME is null");
            return this;
        }

        public Criteria andAuthorizeTimeIsNotNull() {
            addCriterion("AUTHORIZE_TIME is not null");
            return this;
        }

        public Criteria andAuthorizeTimeEqualTo(BigDecimal value) {
            addCriterion("AUTHORIZE_TIME =", value, "authorizeTime");
            return this;
        }

        public Criteria andAuthorizeTimeNotEqualTo(BigDecimal value) {
            addCriterion("AUTHORIZE_TIME <>", value, "authorizeTime");
            return this;
        }

        public Criteria andAuthorizeTimeGreaterThan(BigDecimal value) {
            addCriterion("AUTHORIZE_TIME >", value, "authorizeTime");
            return this;
        }

        public Criteria andAuthorizeTimeGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("AUTHORIZE_TIME >=", value, "authorizeTime");
            return this;
        }

        public Criteria andAuthorizeTimeLessThan(BigDecimal value) {
            addCriterion("AUTHORIZE_TIME <", value, "authorizeTime");
            return this;
        }

        public Criteria andAuthorizeTimeLessThanOrEqualTo(BigDecimal value) {
            addCriterion("AUTHORIZE_TIME <=", value, "authorizeTime");
            return this;
        }

        public Criteria andAuthorizeTimeIn(List values) {
            addCriterion("AUTHORIZE_TIME in", values, "authorizeTime");
            return this;
        }

        public Criteria andAuthorizeTimeNotIn(List values) {
            addCriterion("AUTHORIZE_TIME not in", values, "authorizeTime");
            return this;
        }

        public Criteria andAuthorizeTimeBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("AUTHORIZE_TIME between", value1, value2, "authorizeTime");
            return this;
        }

        public Criteria andAuthorizeTimeNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("AUTHORIZE_TIME not between", value1, value2, "authorizeTime");
            return this;
        }

        public Criteria andExpiredTimeIsNull() {
            addCriterion("EXPIRED_TIME is null");
            return this;
        }

        public Criteria andExpiredTimeIsNotNull() {
            addCriterion("EXPIRED_TIME is not null");
            return this;
        }

        public Criteria andExpiredTimeEqualTo(BigDecimal value) {
            addCriterion("EXPIRED_TIME =", value, "expiredTime");
            return this;
        }

        public Criteria andExpiredTimeNotEqualTo(BigDecimal value) {
            addCriterion("EXPIRED_TIME <>", value, "expiredTime");
            return this;
        }

        public Criteria andExpiredTimeGreaterThan(BigDecimal value) {
            addCriterion("EXPIRED_TIME >", value, "expiredTime");
            return this;
        }

        public Criteria andExpiredTimeGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("EXPIRED_TIME >=", value, "expiredTime");
            return this;
        }

        public Criteria andExpiredTimeLessThan(BigDecimal value) {
            addCriterion("EXPIRED_TIME <", value, "expiredTime");
            return this;
        }

        public Criteria andExpiredTimeLessThanOrEqualTo(BigDecimal value) {
            addCriterion("EXPIRED_TIME <=", value, "expiredTime");
            return this;
        }

        public Criteria andExpiredTimeIn(List values) {
            addCriterion("EXPIRED_TIME in", values, "expiredTime");
            return this;
        }

        public Criteria andExpiredTimeNotIn(List values) {
            addCriterion("EXPIRED_TIME not in", values, "expiredTime");
            return this;
        }

        public Criteria andExpiredTimeBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("EXPIRED_TIME between", value1, value2, "expiredTime");
            return this;
        }

        public Criteria andExpiredTimeNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("EXPIRED_TIME not between", value1, value2, "expiredTime");
            return this;
        }

        public Criteria andPasswordIsNull() {
            addCriterion("PASSWORD is null");
            return this;
        }

        public Criteria andPasswordIsNotNull() {
            addCriterion("PASSWORD is not null");
            return this;
        }

        public Criteria andPasswordEqualTo(BigDecimal value) {
            addCriterion("PASSWORD =", value, "password");
            return this;
        }

        public Criteria andPasswordNotEqualTo(BigDecimal value) {
            addCriterion("PASSWORD <>", value, "password");
            return this;
        }

        public Criteria andPasswordGreaterThan(BigDecimal value) {
            addCriterion("PASSWORD >", value, "password");
            return this;
        }

        public Criteria andPasswordGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("PASSWORD >=", value, "password");
            return this;
        }

        public Criteria andPasswordLessThan(BigDecimal value) {
            addCriterion("PASSWORD <", value, "password");
            return this;
        }

        public Criteria andPasswordLessThanOrEqualTo(BigDecimal value) {
            addCriterion("PASSWORD <=", value, "password");
            return this;
        }

        public Criteria andPasswordIn(List values) {
            addCriterion("PASSWORD in", values, "password");
            return this;
        }

        public Criteria andPasswordNotIn(List values) {
            addCriterion("PASSWORD not in", values, "password");
            return this;
        }

        public Criteria andPasswordBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("PASSWORD between", value1, value2, "password");
            return this;
        }

        public Criteria andPasswordNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("PASSWORD not between", value1, value2, "password");
            return this;
        }
    }
}