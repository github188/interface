package com.megaeyes.persistence.ibatis.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RUserAccontrolExample {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table R_USER_ACCONTROL
     *
     * @abatorgenerated Mon Apr 16 10:08:17 CST 2012
     */
    private String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table R_USER_ACCONTROL
     *
     * @abatorgenerated Mon Apr 16 10:08:17 CST 2012
     */
    private List oredCriteria = new ArrayList();

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table R_USER_ACCONTROL
     *
     * @abatorgenerated Mon Apr 16 10:08:17 CST 2012
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table R_USER_ACCONTROL
     *
     * @abatorgenerated Mon Apr 16 10:08:17 CST 2012
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table R_USER_ACCONTROL
     *
     * @abatorgenerated Mon Apr 16 10:08:17 CST 2012
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table R_USER_ACCONTROL
     *
     * @abatorgenerated Mon Apr 16 10:08:17 CST 2012
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table R_USER_ACCONTROL
     *
     * @abatorgenerated Mon Apr 16 10:08:17 CST 2012
     */
    public Criteria createCriteria() {
        Criteria criteria = new Criteria();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table R_USER_ACCONTROL
     *
     * @abatorgenerated Mon Apr 16 10:08:17 CST 2012
     */
    public static class Criteria {
        private List criteriaWithoutValue;

        private List criteriaWithSingleValue;

        private List criteriaWithListValue;

        private List criteriaWithBetweenValue;

        private Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        private void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        private void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        private void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andUserIdIsNull() {
            criteriaWithoutValue.add("USER_ID is null");
            return this;
        }

        public Criteria andUserIdIsNotNull() {
            criteriaWithoutValue.add("USER_ID is not null");
            return this;
        }

        public Criteria andUserIdEqualTo(String value) {
            addCriterion("USER_ID =", value, "userId");
            return this;
        }

        public Criteria andUserIdNotEqualTo(String value) {
            addCriterion("USER_ID <>", value, "userId");
            return this;
        }

        public Criteria andUserIdGreaterThan(String value) {
            addCriterion("USER_ID >", value, "userId");
            return this;
        }

        public Criteria andUserIdGreaterThanOrEqualTo(String value) {
            addCriterion("USER_ID >=", value, "userId");
            return this;
        }

        public Criteria andUserIdLessThan(String value) {
            addCriterion("USER_ID <", value, "userId");
            return this;
        }

        public Criteria andUserIdLessThanOrEqualTo(String value) {
            addCriterion("USER_ID <=", value, "userId");
            return this;
        }

        public Criteria andUserIdLike(String value) {
            addCriterion("USER_ID like", value, "userId");
            return this;
        }

        public Criteria andUserIdNotLike(String value) {
            addCriterion("USER_ID not like", value, "userId");
            return this;
        }

        public Criteria andUserIdIn(List values) {
            addCriterion("USER_ID in", values, "userId");
            return this;
        }

        public Criteria andUserIdNotIn(List values) {
            addCriterion("USER_ID not in", values, "userId");
            return this;
        }

        public Criteria andUserIdBetween(String value1, String value2) {
            addCriterion("USER_ID between", value1, value2, "userId");
            return this;
        }

        public Criteria andUserIdNotBetween(String value1, String value2) {
            addCriterion("USER_ID not between", value1, value2, "userId");
            return this;
        }

        public Criteria andControlIdIsNull() {
            criteriaWithoutValue.add("CONTROL_ID is null");
            return this;
        }

        public Criteria andControlIdIsNotNull() {
            criteriaWithoutValue.add("CONTROL_ID is not null");
            return this;
        }

        public Criteria andControlIdEqualTo(String value) {
            addCriterion("CONTROL_ID =", value, "controlId");
            return this;
        }

        public Criteria andControlIdNotEqualTo(String value) {
            addCriterion("CONTROL_ID <>", value, "controlId");
            return this;
        }

        public Criteria andControlIdGreaterThan(String value) {
            addCriterion("CONTROL_ID >", value, "controlId");
            return this;
        }

        public Criteria andControlIdGreaterThanOrEqualTo(String value) {
            addCriterion("CONTROL_ID >=", value, "controlId");
            return this;
        }

        public Criteria andControlIdLessThan(String value) {
            addCriterion("CONTROL_ID <", value, "controlId");
            return this;
        }

        public Criteria andControlIdLessThanOrEqualTo(String value) {
            addCriterion("CONTROL_ID <=", value, "controlId");
            return this;
        }

        public Criteria andControlIdLike(String value) {
            addCriterion("CONTROL_ID like", value, "controlId");
            return this;
        }

        public Criteria andControlIdNotLike(String value) {
            addCriterion("CONTROL_ID not like", value, "controlId");
            return this;
        }

        public Criteria andControlIdIn(List values) {
            addCriterion("CONTROL_ID in", values, "controlId");
            return this;
        }

        public Criteria andControlIdNotIn(List values) {
            addCriterion("CONTROL_ID not in", values, "controlId");
            return this;
        }

        public Criteria andControlIdBetween(String value1, String value2) {
            addCriterion("CONTROL_ID between", value1, value2, "controlId");
            return this;
        }

        public Criteria andControlIdNotBetween(String value1, String value2) {
            addCriterion("CONTROL_ID not between", value1, value2, "controlId");
            return this;
        }
    }
}